
No results

Aa

Analise o arquivo, o mesmo se trata de joins, crie a documenta√ß√£o do arquivo, baseado em explica√ß√µes para servir de apoio nos estudos sobre joins



Claude Sonnet 4.5
‚èé
1 rule
1 context item
Documenta√ß√£o: Estudo de JOINs em SQL
Este arquivo demonstra progressivamente como utilizar INNER JOIN para combinar dados de diferentes tabelas e realizar an√°lises relacionais.

üìö Conceitos Fundamentais
O que √© JOIN?
JOIN √© uma opera√ß√£o que combina linhas de duas ou mais tabelas baseado em uma condi√ß√£o de relacionamento entre elas (geralmente chaves estrangeiras).

INNER JOIN
Retorna apenas os registros que possuem correspond√™ncia em ambas as tabelas.

üîç An√°lise das Queries
1. Consultas Explorat√≥rias Simples
Sql

Apply
SELECT * FROM TABELA_DE_VENDEDORES;
SELECT * FROM NOTAS_FISCAIS;
Objetivo: Conhecer a estrutura e os dados das tabelas antes de combin√°-las.

2. Contagem Sem JOIN (Incompleta)
Sql

Apply
SELECT MATRICULA, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS;
‚ö†Ô∏è Problema: Esta query est√° incompleta - falta o GROUP BY.

Mostra apenas a matr√≠cula, sem o nome do vendedor
N√£o h√° relacionamento com a tabela de vendedores
3. Primeiro JOIN - Contagem por Vendedor
Sql

Apply
SELECT MATRICULA, NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA 
GROUP BY MATRICULA, NOME;
O que faz:

Combina as duas tabelas pela matr√≠cula
Conta quantas notas fiscais cada vendedor emitiu
Agrupa por matr√≠cula e nome
‚ö†Ô∏è Ambiguidade: MATRICULA existe nas duas tabelas - pode gerar erro em alguns SGBDs.

4. JOIN com Qualifica√ß√£o de Colunas
Sql

Apply
SELECT NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA 
GROUP BY NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME;
‚úÖ Melhoria: Qualifica explicitamente de qual tabela vem cada coluna.

NOTAS_FISCAIS.MATRICULA
TABELA_DE_VENDEDORES.NOME
Benef√≠cio: Elimina ambiguidade e melhora a legibilidade.

5. JOIN com ALIAS (Forma Otimizada) ‚≠ê
Sql

Apply
SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS NF 
INNER JOIN TABELA_DE_VENDEDORES TV 
ON NF.MATRICULA = TV.MATRICULA 
GROUP BY NF.MATRICULA, TV.NOME;
‚úÖ Melhor Pr√°tica:

NF = alias para NOTAS_FISCAIS
TV = alias para TABELA_DE_VENDEDORES
C√≥digo mais limpo e f√°cil de ler
Reduz digita√ß√£o e possibilidade de erros
6. Invertendo a Ordem do JOIN
Sql

Apply
SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM TABELA_DE_VENDEDORES TV  
INNER JOIN NOTAS_FISCAIS NF
ON NF.MATRICULA = TV.MATRICULA 
GROUP BY NF.MATRICULA, TV.NOME;
üìå Aprendizado Importante:

A ordem das tabelas no INNER JOIN n√£o afeta o resultado
FROM TV INNER JOIN NF = FROM NF INNER JOIN TV
O resultado √© o mesmo, apenas a sequ√™ncia de processamento pode variar
üéØ Resumo das Boas Pr√°ticas
Pr√°tica	Exemplo	Benef√≠cio
Usar ALIAS		C√≥digo mais limpo
Qualificar colunas		Evita ambiguidade
Documentar com coment√°rios		Facilita manuten√ß√£o
GROUP BY ap√≥s JOIN	Sempre que usar COUNT, SUM, etc.	Resultados agregados corretos
üí° Conceitos-Chave para Estudar
Relacionamento 1:N - Um vendedor pode ter v√°rias notas fiscais
Chave Estrangeira - MATRICULA em NOTAS_FISCAIS referencia TABELA_DE_VENDEDORES
Agrega√ß√£o - COUNT(*) com GROUP BY para estat√≠sticas
Qualifica√ß√£o de Colunas - Tabela.Coluna ou Alias.Coluna
üîÑ Pr√≥ximos Passos de Estudo
LEFT JOIN: Para incluir vendedores sem notas fiscais
RIGHT JOIN: Para visualizar notas sem vendedor associado
FULL OUTER JOIN: Combina√ß√£o de LEFT e RIGHT
CROSS JOIN: Produto cartesiano entre tabelas






passe para o arquivo essa estrutura



Claude Sonnet 4.5
‚èé
1 rule
SELECT_JOINS.sql

Apply
/*
================================================================================
  DOCUMENTA√á√ÉO: ESTUDO DE JOINs EM SQL
================================================================================

üìö CONCEITOS FUNDAMENTAIS
-------------------------
O que √© JOIN?
  JOIN √© uma opera√ß√£o que combina linhas de duas ou mais tabelas baseado em 
  uma condi√ß√£o de relacionamento entre elas (geralmente chaves estrangeiras).

INNER JOIN:
  Retorna apenas os registros que possuem correspond√™ncia em AMBAS as tabelas.

================================================================================
*/

-- =============================================================================
-- 1. CONSULTAS EXPLORAT√ìRIAS SIMPLES
-- =============================================================================
-- Objetivo: Conhecer a estrutura e os dados das tabelas antes de combin√°-las.

SELECT * FROM TABELA_DE_VENDEDORES;

SELECT * FROM NOTAS_FISCAIS;

-- =============================================================================
-- 2. CONTAGEM SEM JOIN (INCOMPLETA)
-- =============================================================================
-- ‚ö†Ô∏è PROBLEMA: Esta query est√° INCOMPLETA - falta o GROUP BY
-- - Mostra apenas a matr√≠cula, sem o nome do vendedor
-- - N√£o h√° relacionamento com a tabela de vendedores

SELECT MATRICULA, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS;

-- =============================================================================
-- 3. PRIMEIRO JOIN - CONTAGEM POR VENDEDOR
-- =============================================================================
-- O que faz:
-- - Combina as duas tabelas pela matr√≠cula
-- - Conta quantas notas fiscais cada vendedor emitiu
-- - Agrupa por matr√≠cula e nome
--
-- ‚ö†Ô∏è AMBIGUIDADE: MATRICULA existe nas duas tabelas - pode gerar erro

SELECT MATRICULA, NOME, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA 
GROUP BY MATRICULA, NOME;

-- =============================================================================
-- 4. JOIN COM QUALIFICA√á√ÉO DE COLUNAS
-- =============================================================================
-- ‚úÖ MELHORIA: Qualifica explicitamente de qual tabela vem cada coluna
-- - NOTAS_FISCAIS.MATRICULA
-- - TABELA_DE_VENDEDORES.NOME
--
-- BENEF√çCIO: Elimina ambiguidade e melhora a legibilidade

SELECT NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA 
GROUP BY NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME;

-- =============================================================================
-- 5. JOIN COM ALIAS (FORMA OTIMIZADA) ‚≠ê
-- =============================================================================
-- ‚úÖ MELHOR PR√ÅTICA:
-- - NF = alias para NOTAS_FISCAIS
-- - TV = alias para TABELA_DE_VENDEDORES
-- - C√≥digo mais limpo e f√°cil de ler
-- - Reduz digita√ß√£o e possibilidade de erros

SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS NF 
INNER JOIN TABELA_DE_VENDEDORES TV 
ON NF.MATRICULA = TV.MATRICULA 
-- Agrupamento pelos campos MATRICULA e NOME para contar notas fiscais por vendedor
GROUP BY NF.MATRICULA, TV.NOME;

-- =============================================================================
-- 6. INVERTENDO A ORDEM DO JOIN
-- =============================================================================
-- üìå APRENDIZADO IMPORTANTE:
-- - A ordem das tabelas no INNER JOIN N√ÉO AFETA O RESULTADO
-- - FROM TV INNER JOIN NF = FROM NF INNER JOIN TV
-- - O resultado √© o mesmo, apenas a sequ√™ncia de processamento pode variar

SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM TABELA_DE_VENDEDORES TV  
INNER JOIN NOTAS_FISCAIS NF
ON NF.MATRICULA = TV.MATRICULA 
GROUP BY NF.MATRICULA, TV.NOME;

/*
================================================================================
  üéØ RESUMO DAS BOAS PR√ÅTICAS
================================================================================

PR√ÅTICA                 | EXEMPLO                      | BENEF√çCIO
------------------------|------------------------------|---------------------------
Usar ALIAS              | FROM NOTAS_FISCAIS NF        | C√≥digo mais limpo
Qualificar colunas      | NF.MATRICULA                 | Evita ambiguidade
Documentar              | -- Agrupamento por vendedor  | Facilita manuten√ß√£o
GROUP BY ap√≥s JOIN      | Sempre com COUNT, SUM, etc.  | Resultados corretos

================================================================================
  üí° CONCEITOS-CHAVE PARA ESTUDAR
================================================================================

1. RELACIONAMENTO 1:N
   Um vendedor pode ter v√°rias notas fiscais

2. CHAVE ESTRANGEIRA
   MATRICULA em NOTAS_FISCAIS referencia TABELA_DE_VENDEDORES

3. AGREGA√á√ÉO
   COUNT(*) com GROUP BY para estat√≠sticas

4. QUALIFICA√á√ÉO DE COLUNAS
   Tabela.Coluna ou Alias.Coluna

================================================================================
  üîÑ PR√ìXIMOS PASSOS DE ESTUDO
================================================================================

- LEFT JOIN:        Para incluir vendedores sem notas fiscais
- RIGHT JOIN:       Para visualizar notas sem vendedor associado
- FULL OUTER JOIN:  Combina√ß√£o de LEFT e RIGHT
- CROSS JOIN:       Produto cartesiano entre tabelas

================================================================================
*/





reanalize a estrutura, deixe com mais enfase em explica√ß√µes sobre as query e as estrutura das querys, focando em documentar e explicar a estrutura join



Claude Sonnet 4.5
‚èé
1 rule
SELECT_JOINS.sql
Applying
/*
================================================================================
  DOCUMENTA√á√ÉO COMPLETA: INNER JOIN EM SQL
================================================================================

üìñ O QUE √â JOIN?
----------------
JOIN √© uma cl√°usula SQL que permite COMBINAR DADOS de duas ou mais tabelas
relacionadas em uma √∫nica consulta. √â fundamental para trabalhar com bancos
de dados relacionais, onde as informa√ß√µes est√£o distribu√≠das em v√°rias tabelas.

üîó INNER JOIN - DEFINI√á√ÉO
-------------------------
O INNER JOIN retorna apenas as linhas onde existe CORRESPOND√äNCIA entre as
tabelas envolvidas. Se um registro n√£o tiver par correspondente na outra 
tabela, ele N√ÉO aparecer√° no resultado.

Analogia: √â como uma interse√ß√£o de conjuntos - apenas o que est√° em AMBOS.

üìê ESTRUTURA B√ÅSICA DO INNER JOIN
----------------------------------

SELECT colunas
FROM tabela1
INNER JOIN tabela2
ON tabela1.coluna_relacionamento = tabela2.coluna_relacionamento;

Componentes:
  - FROM: Define a primeira tabela (tabela base)
  - INNER JOIN: Especifica a segunda tabela a ser combinada
  - ON: Define a CONDI√á√ÉO de relacionamento (como as tabelas se conectam)

üîë RELACIONAMENTO ENTRE TABELAS
--------------------------------
No nosso exemplo:
  - TABELA_DE_VENDEDORES: Cont√©m informa√ß√µes dos vendedores (MATRICULA, NOME)
  - NOTAS_FISCAIS: Cont√©m vendas realizadas (inclui MATRICULA do vendedor)
  
Relacionamento: 1:N (Um vendedor pode ter V√ÅRIAS notas fiscais)
Chave de Liga√ß√£o: MATRICULA (presente em ambas as tabelas)

================================================================================
*/

-- =============================================================================
-- QUERY 1: EXPLORA√á√ÉO DA TABELA DE VENDEDORES
-- =============================================================================
/*
OBJETIVO: Visualizar toda a estrutura e dados da tabela de vendedores

ESTRUTURA:
  SELECT *              ‚Üí Seleciona TODAS as colunas
  FROM tabela          ‚Üí Define de qual tabela vem os dados

RESULTADO ESPERADO:
  - MATRICULA: C√≥digo √∫nico do vendedor
  - NOME: Nome completo
  - Outras informa√ß√µes cadastrais (comiss√£o, data admiss√£o, etc.)

USO: Sempre explore as tabelas individualmente antes de fazer JOINs
*/
SELECT * FROM TABELA_DE_VENDEDORES;

-- =============================================================================
-- QUERY 2: EXPLORA√á√ÉO DA TABELA DE NOTAS FISCAIS
-- =============================================================================
/*
OBJETIVO: Visualizar toda a estrutura e dados das notas fiscais emitidas

ESTRUTURA:
  SELECT *              ‚Üí Seleciona TODAS as colunas
  FROM tabela          ‚Üí Define de qual tabela vem os dados

RESULTADO ESPERADO:
  - NUMERO: N√∫mero da nota fiscal
  - DATA_VENDA: Data da emiss√£o
  - CPF: Cliente
  - MATRICULA: Vendedor respons√°vel (CHAVE ESTRANGEIRA)
  - IMPOSTO: Valor do imposto

IMPORTANTE: MATRICULA aqui √© a CHAVE ESTRANGEIRA que liga √† tabela de vendedores
*/
SELECT * FROM NOTAS_FISCAIS;

-- =============================================================================
-- QUERY 3: TENTATIVA DE CONTAGEM (INCORRETA/INCOMPLETA)
-- =============================================================================
/*
‚ö†Ô∏è PROBLEMA T√âCNICO: Esta query tem um ERRO ou est√° incompleta!

ESTRUTURA TENTADA:
  SELECT MATRICULA, COUNT(*)    ‚Üí Seleciona matr√≠cula e conta registros
  FROM NOTAS_FISCAIS           ‚Üí Da tabela de notas fiscais
  
ERRO: Quando usamos fun√ß√£o de agrega√ß√£o (COUNT), precisamos do GROUP BY!

MENSAGEM DE ERRO ESPERADA:
  "Column 'MATRICULA' is not in GROUP BY clause"

POR QUE EST√Å ERRADO?
  - COUNT(*) gera UM √∫nico resultado (total de linhas)
  - MATRICULA sem GROUP BY tenta mostrar V√ÅRIOS valores
  - SQL n√£o sabe qual matr√≠cula mostrar junto com a contagem total

LIMITA√á√ïES ADICIONAIS:
  - Mostra apenas MATRICULA (n√∫mero), n√£o o NOME do vendedor
  - N√£o h√° JOIN, ent√£o n√£o temos acesso aos dados da outra tabela
  - Mesmo corrigido com GROUP BY, ainda seria informa√ß√£o limitada

CORRE√á√ÉO NECESS√ÅRIA:
  SELECT MATRICULA, COUNT(*) 
  FROM NOTAS_FISCAIS 
  GROUP BY MATRICULA;  ‚Üê Isso faltou!
*/
SELECT MATRICULA, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS;

-- =============================================================================
-- QUERY 4: PRIMEIRO JOIN - CONTAGEM POR VENDEDOR
-- =============================================================================
/*
üéØ OBJETIVO: Contar quantas notas fiscais cada vendedor emitiu, mostrando o NOME

ESTRUTURA DETALHADA:

  SELECT MATRICULA, NOME, COUNT(*) AS NUMERO_NOTAS
  ‚Üì
  Colunas que queremos no resultado:
    - MATRICULA: C√≥digo do vendedor
    - NOME: Nome do vendedor (vem da outra tabela via JOIN)
    - COUNT(*) AS NUMERO_NOTAS: Total de notas, renomeado para clareza

  FROM NOTAS_FISCAIS
  ‚Üì
  Tabela BASE (primeira tabela da consulta)
  Cont√©m os registros de vendas que queremos contar

  INNER JOIN TABELA_DE_VENDEDORES
  ‚Üì
  Tabela SECUND√ÅRIA que ser√° COMBINADA com a primeira
  Cont√©m as informa√ß√µes dos vendedores (especialmente o NOME)

  ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA
  ‚Üì
  CONDI√á√ÉO DE LIGA√á√ÉO: Define COMO as tabelas se relacionam
  "Junte as linhas onde a MATRICULA de uma tabela IGUAL √† MATRICULA da outra"

  GROUP BY MATRICULA, NOME
  ‚Üì
  AGRUPAMENTO: Necess√°rio porque usamos COUNT(*)
  Agrupa os resultados por vendedor (identificado por MATRICULA e NOME)
  Cada linha do resultado representar√° UM vendedor com sua contagem

‚ö†Ô∏è PROBLEMA DE AMBIGUIDADE:
  "MATRICULA" existe nas DUAS tabelas!
  Alguns bancos de dados podem dar erro ou ficar confusos
  Qual MATRICULA usar: da NOTAS_FISCAIS ou da TABELA_DE_VENDEDORES?

COMO FUNCIONA O JOIN INTERNAMENTE:
  1. Para cada registro de NOTAS_FISCAIS
  2. Procura na TABELA_DE_VENDEDORES onde MATRICULA seja igual
  3. Quando encontra, COMBINA as colunas das duas tabelas em uma linha
  4. Se n√£o encontrar correspond√™ncia, descarta a linha

RESULTADO ESPERADO:
  MATRICULA | NOME              | NUMERO_NOTAS
  ----------|-------------------|-------------
  00233     | Jo√£o Silva        | 25
  00235     | Maria Santos      | 30
  00236     | Pedro Oliveira    | 15
*/
SELECT MATRICULA, NOME, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA 
GROUP BY MATRICULA, NOME;

-- =============================================================================
-- QUERY 5: JOIN COM QUALIFICA√á√ÉO EXPL√çCITA DE COLUNAS
-- =============================================================================
/*
‚úÖ SOLU√á√ÉO PARA AMBIGUIDADE: Qualificar cada coluna com o nome da tabela

ESTRUTURA APRIMORADA:

  SELECT 
    NOTAS_FISCAIS.MATRICULA,           ‚Üê Especifica: MATRICULA da tabela NF
    TABELA_DE_VENDEDORES.NOME,         ‚Üê Especifica: NOME da tabela TV
    COUNT(*) AS NUMERO_NOTAS           ‚Üê Fun√ß√£o de agrega√ß√£o
  FROM NOTAS_FISCAIS 
  INNER JOIN TABELA_DE_VENDEDORES 
  ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA
  GROUP BY 
    NOTAS_FISCAIS.MATRICULA,           ‚Üê Qualificado no GROUP BY tamb√©m
    TABELA_DE_VENDEDORES.NOME

SINTAXE DE QUALIFICA√á√ÉO:
  nome_da_tabela.nome_da_coluna

VANTAGENS:
  ‚úì Elimina AMBIGUIDADE: SQL sabe exatamente de onde vem cada coluna
  ‚úì LEGIBILIDADE: Quem l√™ o c√≥digo entende a origem dos dados
  ‚úì MANUTEN√á√ÉO: Facilita mudan√ßas futuras no c√≥digo
  ‚úì EVITA ERROS: Principalmente quando as tabelas t√™m colunas com nomes iguais

QUANDO √â OBRIGAT√ìRIO?
  - Quando duas tabelas t√™m colunas com o MESMO NOME
  - Em queries complexas com m√∫ltiplos JOINs
  - Em ambientes de produ√ß√£o (boa pr√°tica profissional)

FLUXO DE EXECU√á√ÉO:
  1. FROM: Carrega NOTAS_FISCAIS
  2. INNER JOIN: Combina com TABELA_DE_VENDEDORES usando condi√ß√£o ON
  3. SELECT: Seleciona as colunas especificadas (j√° combinadas)
  4. GROUP BY: Agrupa por vendedor
  5. COUNT(*): Conta registros em cada grupo
*/
SELECT NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS 
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA 
GROUP BY NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME;

-- =============================================================================
-- QUERY 6: JOIN COM ALIAS - MELHOR PR√ÅTICA PROFISSIONAL ‚≠ê
-- =============================================================================
/*
üèÜ FORMA OTIMIZADA: Usar ALIAS (apelidos) para as tabelas

ESTRUTURA COM ALIAS:

  SELECT 
    NF.MATRICULA,                      ‚Üê "NF" √© muito mais curto!
    TV.NOME,                           ‚Üê "TV" √© muito mais curto!
    COUNT(*) AS NUMERO_NOTAS
  FROM NOTAS_FISCAIS NF                ‚Üê Defini√ß√£o do alias NF
  INNER JOIN TABELA_DE_VENDEDORES TV   ‚Üê Defini√ß√£o do alias TV
  ON NF.MATRICULA = TV.MATRICULA       ‚Üê Usando alias na condi√ß√£o
  GROUP BY NF.MATRICULA, TV.NOME       ‚Üê Usando alias no agrupamento

O QUE √â ALIAS?
  √â um "apelido" tempor√°rio dado √† tabela durante a query
  
SINTAXE:
  nome_tabela_completo ALIAS
  ou
  nome_tabela_completo AS ALIAS  (AS √© opcional)

CONVEN√á√ïES COMUNS:
  - Usar iniciais da tabela: NOTAS_FISCAIS ‚Üí NF
  - Abrevia√ß√µes l√≥gicas: CLIENTES ‚Üí C ou CLI
  - Manter consist√™ncia no projeto todo

VANTAGENS DOS ALIAS:
  ‚úì CONCIS√ÉO: C√≥digo mais curto e limpo
  ‚úì DIGITA√á√ÉO: Menos caracteres para digitar
  ‚úì LEGIBILIDADE: Mais f√°cil de ler (menos polu√≠do)
  ‚úì PRODUTIVIDADE: Acelera o desenvolvimento
  ‚úì PADR√ÉO: √â a forma mais usada por profissionais

COMPARA√á√ÉO:
  ‚ùå Sem alias: TABELA_DE_VENDEDORES.NOME (26 caracteres)
  ‚úÖ Com alias: TV.NOME (7 caracteres)

BOAS PR√ÅTICAS:
  - Use alias curtos mas descritivos
  - Mantenha consist√™ncia em todo o script
  - Em tabelas com nomes longos, alias √© ESSENCIAL
  - Em queries complexas, facilita muito a leitura
*/
SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS NF 
INNER JOIN TABELA_DE_VENDEDORES TV 
ON NF.MATRICULA = TV.MATRICULA 
-- Agrupamento pelos campos MATRICULA e NOME para contar notas fiscais por vendedor
GROUP BY NF.MATRICULA, TV.NOME;

-- =============================================================================
-- QUERY 7: INVERTENDO A ORDEM DO JOIN
-- =============================================================================
/*
üìå EXPERIMENTO: E se trocarmos a ordem das tabelas?

ESTRUTURA COM ORDEM INVERTIDA:

  FROM TABELA_DE_VENDEDORES TV         ‚Üê Agora a tabela de vendedores √© a BASE
  INNER JOIN NOTAS_FISCAIS NF          ‚Üê E notas fiscais √© a que se junta

‚öñÔ∏è RESULTADO: EXATAMENTE O MESMO!

CONCEITO IMPORTANTE SOBRE INNER JOIN:
  A ORDEM DAS TABELAS N√ÉO ALTERA O RESULTADO FINAL!
  
  Por qu√™?
  - INNER JOIN √© COMUTATIVO (como adi√ß√£o: 2+3 = 3+2)
  - Retorna apenas linhas com correspond√™ncia em AMBAS
  - O conjunto final de correspond√™ncias √© o mesmo
  - A ordem s√≥ afeta a sequ√™ncia de processamento interno

VISUALIZA√á√ÉO:

  Op√ß√£o 1: FROM NF INNER JOIN TV
  NF (base) ‚Üí busca correspond√™ncias em ‚Üí TV
  
  Op√ß√£o 2: FROM TV INNER JOIN NF  
  TV (base) ‚Üí busca correspond√™ncias em ‚Üí NF
  
  Resultado: As mesmas linhas, pode ser em ordem diferente!

QUANDO A ORDEM IMPORTA?
  ‚úì LEFT JOIN: A tabela √† esquerda (FROM) determina quais registros aparecem
  ‚úì RIGHT JOIN: A tabela √† direita determina quais registros aparecem
  ‚úó INNER JOIN: N√£o importa (resultado igual)

PERFORMANCE:
  - Em teoria, pode haver diferen√ßa m√≠nima de performance
  - Na pr√°tica, o otimizador SQL geralmente trata igual
  - Em tabelas grandes, o banco decide a melhor ordem de execu√ß√£o

ESCOLHA DA ORDEM (Recomenda√ß√µes):
  - Coloque primeiro a tabela "principal" (mais importante logicamente)
  - Use a ordem que faz mais sentido para a l√≥gica do neg√≥cio
  - Mantenha consist√™ncia no projeto
  
NESTE CASO:
  - FROM NOTAS_FISCAIS faz mais sentido (estamos contando VENDAS)
  - Mas FROM TABELA_DE_VENDEDORES tamb√©m funciona perfeitamente
*/
SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM TABELA_DE_VENDEDORES TV  
INNER JOIN NOTAS_FISCAIS NF
ON NF.MATRICULA = TV.MATRICULA 
GROUP BY NF.MATRICULA, TV.NOME;

/*
================================================================================
  üìä RESUMO COMPARATIVO DAS T√âCNICAS
================================================================================

EVOLU√á√ÉO DAS QUERIES:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Query 3: Sem JOIN
  ‚îî‚îÄ Limita√ß√£o: Apenas dados de UMA tabela
  ‚îî‚îÄ Problema: N√£o mostra nome do vendedor

Query 4: JOIN sem qualifica√ß√£o
  ‚îî‚îÄ Avan√ßo: Combina DUAS tabelas
  ‚îî‚îÄ Problema: Ambiguidade nas colunas

Query 5: JOIN com qualifica√ß√£o completa
  ‚îî‚îÄ Avan√ßo: Sem ambiguidade
  ‚îî‚îÄ Problema: Muito verboso

Query 6: JOIN com ALIAS (IDEAL)
  ‚îî‚îÄ Avan√ßo: Conciso e claro
  ‚îî‚îÄ Status: ‚úÖ MELHOR PR√ÅTICA

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

================================================================================
  üéØ ANATOMIA COMPLETA DE UM INNER JOIN
================================================================================

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  SELECT alias1.coluna, alias2.coluna, funcoes_agregacao         ‚îÇ ‚Üê O QUE mostrar
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  FROM tabela1 alias1                                            ‚îÇ ‚Üê Tabela BASE
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  INNER JOIN tabela2 alias2                                      ‚îÇ ‚Üê Tabela a JUNTAR
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  ON alias1.chave = alias2.chave                                 ‚îÇ ‚Üê CONDI√á√ÉO de liga√ß√£o
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  WHERE condicoes                                                ‚îÇ ‚Üê Filtros (opcional)
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  GROUP BY alias1.coluna, alias2.coluna                          ‚îÇ ‚Üê Agrupamento
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  HAVING condicoes_agregadas                                     ‚îÇ ‚Üê Filtro p√≥s-agrega√ß√£o
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  ORDER BY coluna                                                ‚îÇ ‚Üê Ordena√ß√£o
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

ORDEM DE EXECU√á√ÉO L√ìGICA (diferente da ordem de escrita!):
  1¬∫ FROM + JOIN   ‚Üí Combina as tabelas
  2¬∫ WHERE         ‚Üí Filtra linhas individuais
  3¬∫ GROUP BY      ‚Üí Agrupa linhas
  4¬∫ HAVING        ‚Üí Filtra grupos
  5¬∫ SELECT        ‚Üí Seleciona colunas
  6¬∫ ORDER BY      ‚Üí Ordena resultado final

================================================================================
  üí° CONCEITOS FUNDAMENTAIS DEMONSTRADOS
================================================================================

1. RELACIONAMENTO 1:N (Um para Muitos)
   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   Um vendedor (1) pode ter v√°rias (N) notas fiscais
   
   TABELA_DE_VENDEDORES          NOTAS_FISCAIS
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ MATRICULA (PK)  ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚Üí‚îÇ MATRICULA(FK)‚îÇ
   ‚îÇ NOME            ‚îÇ       ‚îÇ    ‚îÇ NUMERO       ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò       ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                             ‚îÇ    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                             ‚îú‚îÄ‚îÄ‚îÄ‚Üí‚îÇ MATRICULA(FK)‚îÇ
                             ‚îÇ    ‚îÇ NUMERO       ‚îÇ
                             ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                             ‚îÇ    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                             ‚îî‚îÄ‚îÄ‚îÄ‚Üí‚îÇ MATRICULA(FK)‚îÇ
                                  ‚îÇ NUMERO       ‚îÇ
                                  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

2. CHAVE PRIM√ÅRIA vs CHAVE ESTRANGEIRA
   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   PK (Primary Key): Identificador √öNICO na tabela (MATRICULA em vendedores)
   FK (Foreign Key): Refer√™ncia √† chave de OUTRA tabela (MATRICULA em notas)

3. FUN√á√ÉO DE AGREGA√á√ÉO (COUNT)
   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   Combina m√∫ltiplas linhas em UM √∫nico resultado
   Requer GROUP BY para especificar os grupos
   
   Exemplo:
   Vendedor A: 5 notas ‚Üí GROUP BY agrupa ‚Üí COUNT(*) = 5
   Vendedor B: 3 notas ‚Üí GROUP BY agrupa ‚Üí COUNT(*) = 3

4. QUALIFICA√á√ÉO DE COLUNAS
   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   Sintaxe: tabela.coluna ou alias.coluna
   Necess√°rio quando: Colunas com mesmo nome existem em m√∫ltiplas tabelas
   Recomendado: SEMPRE (boa pr√°tica profissional)

================================================================================
  üîÑ PR√ìXIMOS PASSOS: OUTROS TIPOS DE JOIN
================================================================================

LEFT JOIN (ou LEFT OUTER JOIN)
  ‚îî‚îÄ Retorna TODOS da tabela esquerda + correspond√™ncias da direita
  ‚îî‚îÄ Uso: "Quero ver TODOS os vendedores, mesmo sem vendas"
  ‚îî‚îÄ Exemplo:
     SELECT TV.NOME, COUNT(NF.NUMERO) 
     FROM TABELA_DE_VENDEDORES TV
     LEFT JOIN NOTAS_FISCAIS NF ON TV.MATRICULA = NF.MATRICULA
     GROUP BY TV.NOME;

RIGHT JOIN (ou RIGHT OUTER JOIN)
  ‚îî‚îÄ Retorna TODOS da tabela direita + correspond√™ncias da esquerda
  ‚îî‚îÄ Uso: Menos comum, geralmente substitu√≠do por LEFT JOIN invertido

FULL OUTER JOIN
  ‚îî‚îÄ Retorna TODOS de AMBAS as tabelas, com ou sem correspond√™ncia
  ‚îî‚îÄ Uso: "Quero ver tudo, vendedores sem vendas E vendas sem vendedor"

CROSS JOIN
  ‚îî‚îÄ Produto cartesiano: Cada linha de A com CADA linha de B
  ‚îî‚îÄ Uso: Raras situa√ß√µes espec√≠ficas (combina√ß√µes, testes)

SELF JOIN
  ‚îî‚îÄ Tabela faz JOIN consigo mesma
  ‚îî‚îÄ Uso: Hierarquias, compara√ß√µes dentro da mesma tabela

================================================================================
  ‚úÖ CHECKLIST DE BOAS PR√ÅTICAS
================================================================================

  [‚úì] Sempre use ALIAS em JOINs (NF, TV, etc.)
  [‚úì] Qualifique TODAS as colunas com alias (NF.MATRICULA)
  [‚úì] Use GROUP BY quando usar fun√ß√µes agregadas (COUNT, SUM, AVG)
  [‚úì] Documente queries complexas com coment√°rios
  [‚úì] Teste queries simples antes de adicionar JOINs
  [‚úì] Explore as tabelas individualmente primeiro (SELECT *)
  [‚úì] Nomeie colunas calculadas com AS (COUNT(*) AS TOTAL)
  [‚úì] Mantenha indenta√ß√£o consistente para legibilidade
  [‚úì] Em produ√ß√£o, evite SELECT * (especifique colunas)
  [‚úì] Teste com dados reais para validar resultados

================================================================================
  üìö GLOSS√ÅRIO DE TERMOS
================================================================================

AGREGA√á√ÉO: Combina√ß√£o de m√∫ltiplas linhas em um resultado resumido
ALIAS: Apelido tempor√°rio para tabela ou coluna
AMBIGUIDADE: Quando SQL n√£o sabe qual coluna usar (mesmo nome em v√°rias tabelas)
CARDINALIDADE: Tipo de relacionamento (1:1, 1:N, N:N)
CHAVE ESTRANGEIRA (FK): Coluna que referencia chave prim√°ria de outra tabela
CHAVE PRIM√ÅRIA (PK): Identificador √∫nico de cada registro
COMUTATIVO: Opera√ß√£o onde ordem n√£o altera resultado (A+B = B+A)
INNER JOIN: JOIN que retorna apenas correspond√™ncias em ambas tabelas
QUALIFICA√á√ÉO: Especificar tabela/alias antes da coluna (tabela.coluna)
RELACIONAMENTO: Como tabelas se conectam atrav√©s de chaves

================================================================================
*/






